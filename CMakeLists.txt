cmake_minimum_required (VERSION 2.6)
PROJECT (Pixie)

SET(PIXIE_CMAKE_DIR "${Pixie_SOURCE_DIR}/cmake")
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PIXIE_CMAKE_DIR})

if (UNIX)
SET (OPENEXR_ROOT /servers/dwarf_server/DEVELOPMENT/BLENDER_DEPS/openexr-2.1.0)
SET (OPENVDB_ROOT /servers/dwarf_server/DEVELOPMENT/DEVEL_LIBS/libs/openvdb)
SET (BOOST_ROOT /servers/dwarf_server/DEVELOPMENT/DEVEL_LIBS/libs/boost_static)
SET (ALEMBIC_ROOT_DIR /servers/dwarf_server/DEVELOPMENT/BLENDER_DEPS/alembic/alembic-1.5.1)
SET (HDF5_ROOT_DIR /servers/dwarf_server/DEVELOPMENT/BLENDER_DEPS/hdf5)
SET (TBB_INSTALL_DIR /servers/dwarf_server/DEVELOPMENT/DEVEL_LIBS/libs/tbb41_20130613oss)
SET (BOOST_INCLUDEDIR include)
SET (BOOST_LIBRARYDIR lib)
SET (Boost_DEBUG ON)
SET (Boost_NO_SYSTEM_PATHS ON)
SET (OPENEXR_SUFFIX -2_1)
SET (PYTHON_EXECUTABLE /usr/bin/python)
SET (PYTHON_INCLUDE_DIR /usr/include/python2.6)
SET (PYTHON_LIBRARY /usr/lib64/libpython2.6.so)
SET (TBB_ARCH_PLATFORM intel64/gcc4.4)
SET (OS_FLAG -DLINUX)
endif()

SET(CMAKE_SHARED_MODULE_PREFIX "")
SET(CMAKE_INSTALL_RPATH "$ORIGIN/../lib")

FIND_PACKAGE(Boost 1.44.0)
FIND_PACKAGE(BISON)
FIND_PACKAGE(FLEX)
FIND_PACKAGE(OpenEXR)
FIND_PACKAGE(OpenVDB)
FIND_PACKAGE(TIFF)
FIND_PACKAGE(PNG)
FIND_PACKAGE(X11)
FIND_PACKAGE(PythonLibs)
FIND_PACKAGE(SWIG)
FIND_PACKAGE(TBB)
FIND_PACKAGE(ALEMBIC)

SET (CMAKE_CXX_COMPILER g++)
SET (CMAKE_CC_COMPILER gcc)

IF(NOT OPENEXR_FOUND)
	MESSAGE(FATAL_ERROR "Fatal : OpenEXR - not found")
ENDIF(NOT OPENEXR_FOUND)

if (NOT BISON_FOUND)
    MESSAGE(FATAL_ERROR "No BISON package found")
endif()

if (NOT FLEX_FOUND)
    MESSAGE(FATAL_ERROR "No BISON package found")
endif()

if (NOT TIFF_FOUND)
    MESSAGE(FATAL_ERROR "No Tiff package found")
endif()

if (NOT PNG_FOUND)
    MESSAGE(FATAL_ERROR "No Png package found")
endif()

if (ALEMBIC_FOUND)
    set(USE_ALEMBIC ON)
else()
    MESSAGE(STATUS "Alembic libraries not found, no alembic support")
endif()

if ((NOT OPENVDB_FOUND) OR (NOT Boost_FOUND) OR (NOT TBB_FOUND))
    MESSAGE(STATUS "No OpenVDB, TBB OR Boost package found")
    MESSAGE(STATUS "OpenVDB : ${OPENVDB_FOUND}")
    MESSAGE(STATUS "TBB : ${TBB_FOUND}")
    MESSAGE(STATUS "Boost : ${BOOST_FOUND}")
    set(USE_VDB OFF)
else()
    MESSAGE(STATUS "Found EXR includes at ${OPENEXR_INCLUDE_DIR}")
    MESSAGE(STATUS "Found Boost includes at ${Boost_INCLUDE_DIRS}")
    MESSAGE(STATUS "Found TBB includes at ${TBB_INCLUDE_DIRS}")
    MESSAGE(STATUS "Found TBB libraries at ${TBB_LIBRARIES}")
    set(USE_VDB ON)
endif()

set(CMAKE_CXX_FLAGS "${OS_FLAG} -fpermissive -fPIC -DRENDERER -DPIC -D_REENTRANT -D_THREAD_SAFE -DLINUX")
SET(CMAKE_C_FLAGS_RELEASE "-O3 -march=core2")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=core2")

ADD_SUBDIRECTORY (precomp) 
ADD_SUBDIRECTORY (common) 
if (ALEMBIC_FOUND)
    ADD_SUBDIRECTORY (alembic)
endif()
ADD_SUBDIRECTORY (core)
ADD_SUBDIRECTORY (render) 
ADD_SUBDIRECTORY (sdrc) 
ADD_SUBDIRECTORY (texmake) 
ADD_SUBDIRECTORY (sdr) 
ADD_SUBDIRECTORY (sdrinfo) 
ADD_SUBDIRECTORY (ptcfilter) 
ADD_SUBDIRECTORY (displays)
ADD_SUBDIRECTORY (show)
ADD_SUBDIRECTORY (gui)
ADD_SUBDIRECTORY (shaders) 
if ((SWIG_FOUND) AND (PYTHONLIBS_FOUND))
    ADD_SUBDIRECTORY (py_renderman)
    ADD_SUBDIRECTORY (py_ptc)  
else()
    MESSAGE("Cannot build py_renderman (no SWIG or PYTHON development package)")
endif()

